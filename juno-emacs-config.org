#+STARTUP: overview
#+TITLE: Emacs config for Linux

Attempt to sort out and make literate my main emacs config file, which was previously messy and confusing. A superior literate config, which inspired this one, is [[https://github.com/munen/emacs.d][Alain Lafon's]]. 
* Table of keyboard shortcuts

These are heavily dependent on keychord mode.
  
| a;    | keyboard-escape-quit)     |
| b;    | evil-first-non-blank)     |
| c;    | shell-command)            |
| cx    | Control-X-prefix)         |
| d;    | nxml-finish-element       |
| e;    | evil-end-of-line)         |
| f;    | find file                 |
| f     | avy-goto-char-timer       |
| g;    | swiper                    |
| j;    | dired-jump)               |
| jd    | evil-scroll-up)           |
| kb    | kill-this-buffer)         |
| kd    | evil-scroll-down)         |
| mx    | execute-extended-command) |
| q     | evil delete other windows |
| q;    | go to last edit point     |
| r;    | bookmark-jump)            |
| s;    | save-buffer               |
| v;    | hippie-expand)     |
| w;    | other-window              |
| z;    | expand region             |
| F10   | unassiagned               |
| F11   | toggle linewrap           |
| F5    | regex search/replace      |
| F6    | M-x                       |
| F7    | other window              |
| F8    | toggle neotree            |
| F9    | go to reverse last change |
| M-F12 | recent files              |
|       |                           |


/Lisp blocks start here/.

* Packages

#+begin_src emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(cua-mode t nil (cua-base))
   '(custom-enabled-themes '(solarized-dark))
   '(custom-safe-themes
     '("2809bcb77ad21312897b541134981282dc455ccd7c14d74cc333b6e549b824f3" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" default))
   '(dired-hide-details-hide-information-lines t)
   '(inhibit-startup-screen t)
   '(package-selected-packages
     '(swiper rainbow-mode pdf-tools js2-mode web-mode beacon ag elfeed helpful dired-narrow cider expand-region eww-lnum dired-rainbow idle-highlight-mode avy htmlize evil-collection which-key neotree w3m counsel peep-dired ox-pandoc auctex volatile-highlights solarized-theme smex markdown-mode magit key-chord evil define-word ace-jump-mode))
   '(tool-bar-mode nil))
  (setq suggest-key-bindings t)
  (when (> emacs-major-version 23)				   
	  (require 'package)					   
	  (package-initialize)					   
	  (add-to-list 'package-archives 			   
		       '("melpa" . "https://melpa.org/packages/")
		       'APPEND))				   
#+end_src

* Appearance
  
#+begin_src emacs-lisp
  (load-theme 'solarized-dark' t)

  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(default ((t (:inherit nil :stipple nil :background "#002b36" :foreground "#839496" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 180 :width normal :foundry "unknown" :family "DejaVu Sans Mono")))))
#+end_src

** Enter 'y' or 'n'
Default behaviour is to type 'yes' or 'no'
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
** Turn off scroll bar 
#+begin_src emacs-lisp
    (scroll-bar-mode -1)
#+end_src
** Turn off menu bar
This can be useful sometimes. Turn it on with meta-x menu-bar-mode.
#+begin_src emacs-lisp
    (menu-bar-mode -1)
#+end_src

** Turn off blinking cursor
#+begin_src emacs-lisp
    (blink-cursor-mode -1)
#+end_src
** Full-width cursor
From a suggestion at Pragmatic Emacs
#+begin_src emacs-lisp
(setq x-stretch-cursor t)
#+end_src

** Highlight current line
#+begin_src emacs-lisp 
(setq global-hl-line-mode t)
#+end_src

** Show full path in title bar
Snippet taken from  [[https://stackoverflow.com/questions/29816326/how-to-show-path-to-file-in-the-emacs-mode-line][a Stack Overflow answer]].
#+begin_src emacs-lisp
  (setq frame-title-format
	'(buffer-file-name "%b - %f" ; File buffer
	  (dired-directory dired-directory ; Dired buffer
	   (revert-buffer-function "%b" ; Buffer Menu
	    ("%b - Dir: " default-directory))))) ; Plain buffer

#+end_src

** Bell
   Do not ring the system bell, but show a visible feedback.

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

** Line number
Disable global line numbering because it breaks pdf tools for some reason:
 
#+begin_src emacs-lisp
;;(global-linum-mode t)

#+end_src
** Time display in modeline
Suggested by Alain Lafon's config.
#+begin_src emacs-lisp 
(display-time-mode t)
#+end_src
   
* Org mode

  Lots of this based on suggestions from [[http://pragmaticemacs.com/][Pragmatic Emacs]].

** Set agenda files
   
#+begin_src emacs-lisp
  (custom-set-variables
    '(org-agenda-files (list
      "/home/jon/repos/london/todo.org"
      "~/repos/london/notes-to-self.org"
      "~/repos/london/tech.org"
      "~/repos/london/contacts.org"
      "~/repos/london/readingnotes.org")))

#+end_src


#+begin_src emacs-lisp
      ;; set key for agenda
      (global-set-key (kbd "C-c a") 'org-agenda)

      ;; open agenda in current window
      (setq org-agenda-window-setup (quote current-window))

      ;; capture todo items with C-c c t
      (define-key global-map (kbd "C-c c") 'org-capture)
      (setq org-capture-templates
	    '(("d" "to do" entry (file+headline "/home/jon/repos/london/todo.org" "Tasks for home") "* TODO [#A] ")
	    ("b" "BIFMO" entry (file+headline "/home/jon/repos/london/todo.org" "BIFMO") "* TODO [#A] ")
	      ("a" "home appointment" entry (file+headline "/home/jon/repos/london/todo.org" "appointments") "* Appt: ")
	      ("s" "notes-to-self" entry (file+headline "/home/jon/repos/london/notes-to-self.org" "Notes to self") "* NOTE ")
	      ("t" "tech heading" entry (file+headline "/home/jon/repos/london/tech.org" "Noted") "* NOTE ")
	      ("o" "tech no heading" plain (file+headline "/home/jon/repos/london/tech.org" "Miscellaneous") " "); see if this works
	      ("p" "shopping" entry (file+headline "/home/jon/repos/london/todo.org" "shopping") "** BUY: ")
	      ("g" "general for refilng" entry (file+headline "/home/jon/repos/london/notes-to-self.org" "Notes to self") "*** refile ")
	      ("r" "reading notes" entry (file+headline "/home/jon/repos/london/readingnotes.org" "reading notes") "* AUTHOR: ")))

    (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (org . t)
      (awk . t)
      (sql . t)
      (R .t)
      (shell . t)))

    (eval-after-load "org" '(require 'ox-odt nil t))

  (setq org-src-fontify-natively t) ;; means fonts, not just colour in org src blocks?
  (global-prettify-symbols-mode t) ;; do I definitely want this? 
  (setq org-export-with-smart-quotes t) ;;don't know why this isn't default!

#+end_src
** Behaviour in collapsed view
#+begin_src emacs-lisp
(setq org-cycle-separator-lines 0)
#+end_src
** Org refile

From Sacha Chua:  https://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/#unnumbered-3
#+begin_src emacs-lisp
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
#+END_SRC
* Recent files and backup

#+begin_src emacs-lisp

  (require 'recentf)
  (setq recentf-max-saved-items 200
	recentf-max-menu-items 15)
  (recentf-mode)
  (global-set-key [(meta f12)] 'recentf-open-files)
#+end_src

** Set backup directory
#+begin_src emacs-lisp
    (setq backup-directory-alist `(("." . "~/.saves")))
#+end_src


* Evil
** Broken tab fix
Tab conflict between Org and Evil. The following must be set before ~(require 'evil)~
#+begin_src emacs-lisp 
(setq evil-want-C-i-jump nil)
#+end_src

** Cursor appearance per state
#+begin_src emacs-lisp 
       (require 'evil)
	(evil-mode 1)
       (setq evil-normal-state-cursor '("orange" box))
       (setq evil-insert-state-cursor '("green" bar))
       (setq evil-visual-state-cursor '("pink" box))
       (setq evil-motion-state-cursor '("blue" box))
       (setq evil-replace-state-cursor '("yellow" box))
       (setq evil-operator-state-cursor '("red" box))
       (define-key evil-normal-state-map "f" 'avy-goto-char-timer)
       
#+end_src
** Cursor behaviour
Useful discussion here: https://www.dr-qubit.org/Evil_cursor_model.html   
However note that for me p pastes after the cursor and P before.
   #+begin_src emacs-lisp
(setq evil-move-cursor-back nil)
(setq evil-move-beyond-eol t)
(setq evil-highlight-closing-paren-at-point-states nil)
   #+end_src
** Evil jump sentence
#+begin_src emacs-lisp
    (setq sentence-end-double-space nil)
#+end_src
* Key chord

#+begin_src emacs-lisp

    (require 'key-chord)
     (key-chord-mode 1)
     (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
  #+end_src
* Set keyboard shortcuts
** Global keys
#+begin_src emacs-lisp
  (key-chord-define-global "f;" 'find-file)
  (key-chord-define-global "jd" 'evil-scroll-up)       
  (key-chord-define-global "kd" 'evil-scroll-down)               
  (key-chord-define-global "mx" 'smex)
  (key-chord-define-global "cx" 'Control-X-prefix)               
  (key-chord-define-global "sb" 'ivy-switch-buffer) 
  (key-chord-define-global "a;" 'keyboard-escape-quit)
  (key-chord-define-global "kb" 'kill-this-buffer)	   
  (key-chord-define-global "s;" 'save-buffer)
  (key-chord-define-global "g;" 'swiper)
  (key-chord-define-global "e;" 'evil-end-of-line)
  (key-chord-define-global "b;" 'evil-first-non-blank)
  (key-chord-define-global "v;" 'hippie-expand)
  (key-chord-define-global "w;" 'other-window)
  (key-chord-define-global "j;" 'dired-jump)
  (key-chord-define-global "c;" 'shell-command)
  (key-chord-define-global "r;" 'bookmark-jump)    
  (key-chord-define-global "z;" 'er/expand-region)
  (key-chord-define-global "q;" 'goto-last-change)
  (global-set-key (kbd "<f5>") 'query-replace-regexp)
  (global-set-key (kbd "<f7>") 'other-window)
  (global-set-key [(f11)] 'toggle-truncate-lines)
  (global-set-key (kbd "<f9>") 'goto-last-change-reverse)
#+end_src
* Smex

#+begin_src emacs-lisp 
  (require 'smex)
  (smex-initialize)
#+end_src

* Dired

#+begin_src emacs-lisp

       ;; allow dired-jump to work automatically
      (require 'dired-x)


      (global-visual-line-mode 1)

      ;; unset evil-record-macro
      (define-key evil-normal-state-map "q" 'delete-other-windows)

      ;; peep dired set-up for evil
      ;; taken from https://github.com/asok/peep-dired
      (evil-define-key 'normal peep-dired-mode-map (kbd "<SPC>") 'peep-dired-scroll-page-down
						   (kbd "C-<SPC>") 'peep-dired-scroll-page-up
						   (kbd "<backspace>") 'peep-dired-scroll-page-up
						   (kbd "j") 'peep-dired-next-file
						   (kbd "k") 'peep-dired-prev-file)
      (add-hook 'peep-dired-hook 'evil-normalize-keymaps)

  (put 'dired-find-alternate-file 'disabled nil)
  (setq-default dired-listing-switches "-alh")

#+end_src

* Ivy

#+begin_src emacs-lisp 
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      ;; intentional space before end of string
      (setq ivy-count-format "(%d/%d) ")
      (setq ivy-initial-inputs-alist nil)

      (setq ivy-display-style 'fancy)
#+end_src

* Scratch buffer

#+begin_src emacs-lisp
  (setq initial-major-mode 'org-mode)
  (setq initial-scratch-message "
  Use this for org export
  ,#+LaTeX_CLASS: jon
  ,#+OPTIONS: toc:nil

  In Evil =g;= jumps to the last edit! except I have this for search in evil
  In Evil =ctrl-o= and =ctrl-i= jump back and forward between previous positions, cross-buffer. Can turn the latter off with
  =evil-jumps-cross-buffers nil= but actually it's a bit like switch buffer so could be handy
  In evil =g i= opens insert mode where insert mode was last used
I should learn how to set this to something else;q
  =mx evil-ex-show-digraphs= shows the main chars and insert sequence
  Jump to percent through buffer by typing, eg, =50%=
  To indent lines nn to nn do =:nn,nn>= (very useful for Python)
  ----------------")
#+end_src

* Dired 

make dired copy to directory in other window
#+begin_src emacs-lisp
(setq dired-dwim-target t)

#+end_src

**  Dired rainbow
config entirely copied from the maintainer's example:
https://github.com/Fuco1/dired-hacks#dired-rainbow
except I have changed some colours

#+begin_src emacs-lisp

    (require 'dired-rainbow)
    (dired-rainbow-define-chmod directory "#da7f00" "d.*")
    (dired-rainbow-define html "#ffed4a" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define org "#d787d7" ("org"))
    (dired-rainbow-define xml "#5f5fff" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown "#5f87ff" ("etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile"))
    (dired-rainbow-define text "#5fafff" ("txt"))
    (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc" "tsv"))
    (dired-rainbow-define media "#d700af" ("mp3" "mp4" "MP3" "mkv" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac" "webm"))
    (dired-rainbow-define image "#afafd7" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
    (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#ff005f" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
     (dired-rainbow-define compiled "#ff5f87" ("asm" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
     (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
     (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
     (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
     (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
     (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
     (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
     (dired-rainbow-define vc "#5fff00" ("git" "gitignore" "gitattributes" "gitmodules"))
     (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")
#+end_src

* XML folding
from https://acidwords.com/posts/2015-10-21-evil-mode-and-xml-folding.html

#+begin_src emacs-lisp
  (require 'hideshow)
  (require 'sgml-mode)
  (require 'nxml-mode)

  (add-to-list 'hs-special-modes-alist
	       '(nxml-mode
		 "<!--\\|<[^/>]*[^/]>"
		 "-->\\|</[^/>]*[^/]>"

		 "<!--"
		 sgml-skip-tag-forward
		 nil))
  (add-hook 'nxml-mode-hook 'hs-minor-mode)

  ;; optional key bindings, easier than his defaults
  (define-key nxml-mode-map (kbd "C-c h") 'hs-toggle-hiding)

#+END_SRC

* Choose starting buffer

#+begin_src emacs-lisp
  '(initial-buffer-choice "~/repos/london/notes-to-self.org")
  (pop-to-buffer (find-file "~/repos/london/notes-to-self.org"))
  (put 'narrow-to-region 'disabled nil)
#+END_SRC
* Package check signature
Currently getting errors but should not keep this long term
#+begin_src emacs-lisp
  (setq package-check-signature nil)
#+END_SRC

* Elfeed
#+begin_src emacs-lisp
    (load "~/.emacs.d/elfeed-feeds.el")

      (add-to-list 'evil-emacs-state-modes 'elfeed-search-mode)
      (add-to-list 'evil-emacs-state-modes 'elfeed-show-mode)
#+end_src

set the default download location for enclosures
#+begin_src emacs-lisp
  (setq elfeed-enclosure-default-dir "/home/jon/pod/")

  #+end_src

Set individual podcast download locations
  
#+begin_src emacs-lisp
(defadvice elfeed-search-update (before word-mouth activate)
  (let ((feed (elfeed-db-get-feed "https://podcasts.files.bbci.co.uk/b006qtnz.rss")))
    (setq elfeed-enclosure-default-dir "/home/jon/pod/word-mouth/")))
#+end_src


what I'd like to do is set the download location per tag, eg
if tag = Rosen
elfeed-enclosure-default-dir "/home/jon/pod/word-mouth/"
else
setq...
as above

Can I customise this from Null Program:

(defadvice elfeed-search-update (before nullprogram activate)
  (let ((feed (elfeed-db-get-feed "https://nullprogram.com/feed/")))
    (setf (elfeed-feed-title feed) "Seriously Handsome Programmer")))

Some like like

(defadvice elfeed-search-update (before word-mouth activate)
  (let ((feed (elfeed-db-get-feed "https://podcasts.files.bbci.co.uk/b006qtnz.rss")))
    (setq (elfeed-enclosure-default-dir) "/home/jon/pod/word-mouth")))


    
* PDF tools 
#+begin_src emacs-lisp 
(pdf-tools-install)
#+end_src
* Expand region
#+begin_src emacs-lisp 
  (require 'expand-region)
#+end_src
* EWW
** default
set eww to be default from within emacs (mostly for elfeed, I think)
from https://alexschroeder.ch/wiki/2020-07-16_Emacs_everything 
but this is not working from within elfeed

#+begin_src emacs-lisp 
(setq browse-url-browser-function 'eww-browse-url)
#+end_src

** bookmarks
functions from https://www.olivertaylor.net/notes/20210207_emacs-extending-bookmarks.html

#+begin_src emacs-lisp 
  (defun oht-eww-bookmark-make-record () "Make a bookmark record for the current eww buffer." `(,(plist-get eww-data :title) ((location
  . ,(eww-current-url)) (handler . oht-eww-bookmark-handler) (defaults . (,(plist-get eww-data :title)))))) 
  (defun oht-eww-bookmark-handler (record)
    "Jump to a bookmark's url with bookmarked location."
    (eww (bookmark-prop-get record 'location)))
  (defun oht-eww-set-bookmark-handler ()
    "Assigns `bookmark-make-record-function' to a custom function."
    (set (make-local-variable 'bookmark-make-record-function)
	 #'oht-eww-bookmark-make-record))

  (add-hook 'eww-mode-hook 'oht-eww-set-bookmark-handler)


  ;; disable Evil where it interferes with core functionality
  (mapc (lambda (mode)
	  (evil-set-initial-state mode 'emacs)) '(eww-mode))
#+end_src
EWW does keyboard link following: https://github.com/m00natic/eww-lnum
however need to turn off f and F's evil funtions in eww

#+begin_src emacs-lisp
  (eval-after-load "eww"
    '(progn (define-key eww-mode-map "f" 'eww-lnum-follow)
	    (define-key eww-mode-map "F" 'eww-lnum-universal)))
#+end_src

* wgrep
When a grep has been run you can edit and write back to many files:
https://github.com/mhayashi1120/Emacs-wgrep

#+begin_src emacs-lisp 
(require 'wgrep)
#+end_src

In the grep window, c-c c-p to make the changes and then save them to the files with:
: C-c C-e
Or abandon with:
: C-c C-u
Exit mode with:
: C-x C-k

* windmove
use arrows to move between windows

#+begin_src emacs-lisp 
(when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))	;
#+end_src

* hippie expand
Trying this based on: http://www.masteringemacs.org/article/text-expansion-hippie-expand
Note that I'm just changing the keyboard mapping for v; from dabbrev-expand to hippie-expand
* LaTeX
Macro to insert the LaTeX export tweaks below from Org files:
#+begin_src emacs-lisp
(fset 'latex-jb
   (kmacro-lambda-form [?g ?g ?O ?# ?+ ?L ?a ?T ?e ?X ?+ backspace ?_ ?C ?L ?A ?S ?S ?: ?  ?j ?b return ?# ?+ ?O ?P ?T ?I ?O ?N ?S ?: ?  ?t ?o ?c ?: ?n ?i ?l] 0 "%d"))

#+end_src
Set org latex export tweaks:
- colors links dark blue (and removes box)
- suppresses numbering on sections?
- putting this at the end of the file since it seems to have dependencies requiring this

#+begin_src emacs-lisp
   (add-to-list 'org-latex-classes
  '("jb"
  "\\documentclass{article}
  \\setcounter{secnumdepth}{0}
  \\usepackage{xcolor}
  \\definecolor{urlcolour}{HTML}{000066}
  \\usepackage{charter} 
  \\usepackage[colorlinks=true,urlcolor=urlcolour]{hyperref}"
   ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

#+end_src
